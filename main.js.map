{"version":3,"sources":["./src/environments/environment.ts","./src/app/services/reddit-data.service.ts","./src/app/components/reddit-card/reddit-card.component.ts","./src/app/components/reddit-card/reddit-card.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/home-page/home-page.component.ts","./src/app/components/home-page/home-page.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of} from 'rxjs';\r\nimport { Listing } from '../interfaces/listing';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RedditDataService {\r\n\r\n  getPosts(reddit: string): Observable<Listing> {\r\n    return this.http.get<Listing>(`https://www.reddit.com/r/${reddit}/.json`);\r\n  }\r\n\r\n  getNextPosts(reddit: string, after: string) {\r\n    return this.http.get<Listing>(`https://www.reddit.com/r/${reddit}/.json?after=${after}`);\r\n  }\r\n\r\n  constructor(private http: HttpClient) { }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\nimport { PostDetails } from '../../interfaces/post-details';\n\n@Component({\n  selector: 'app-reddit-card',\n  templateUrl: './reddit-card.component.html',\n  styleUrls: ['./reddit-card.component.css']\n})\nexport class RedditCardComponent implements OnInit {\n  @Input() card: PostDetails;\n  flipped: boolean;\n  flipText: string;\n  constructor() {\n    this.flipped = false;\n    this.flipText = \"Flip to Thumbnail\";\n  }\n\n  ngOnInit(): void {\n  }\n\n  flip() {\n    this.flipped = !this.flipped;\n    this.flipText = `Flip to ${(this.flipped ? \"Post Title\" : \"Thumbnail\")}`\n  }\n\n}\n","<div *ngIf=\"!card.over_18\" class=\"scene\">\n    <div class=\"reddit-card\" [ngClass]=\"{'is-flipped': flipped}\">\n        <div class=\"reddit-card_face reddit-card_face--front\" [ngStyle]=\"{'background-image': 'url('+card.thumbnail+')'}\"></div>\n        <div class=\"reddit-card_face reddit-card_face--back\">{{card.title}}</div>\n    </div>\n    <div class=\"reddit-card-bottom\">\n        <a class=\"reddit-card-bottom-left reddit-card-bottom-button\" (click)=\"flip()\">{{flipText}}</a>\n        <a class=\"reddit-card-bottom-right reddit-card-bottom-button\" target=\"_blank\" [href]='\"https://www.reddit.com\" + card.permalink'>View on Reddit</a>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'VisualReddit';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { RedditCardComponent } from './components/reddit-card/reddit-card.component';\r\nimport { HomePageComponent } from './components/home-page/home-page.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RedditCardComponent,\r\n    HomePageComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RedditDataService } from '../../services/reddit-data.service';\r\nimport { Listing } from '../../interfaces/listing';\r\nimport { PostData } from '../../interfaces/post-data';\r\n\r\n@Component({\r\n  selector: 'app-home-page',\r\n  templateUrl: './home-page.component.html',\r\n  styleUrls: ['./home-page.component.css']\r\n})\r\nexport class HomePageComponent implements OnInit {\r\n  currentListing: Listing;\r\n  subreddit: string;\r\n\r\n  constructor(private data: RedditDataService) {\r\n    this.subreddit = 'aww';\r\n  }\r\n\r\n  subredditChange() {\r\n    this.data.getPosts(this.subreddit).subscribe(\r\n      x => this.currentListing = x\r\n    );\r\n  }\r\n\r\n  nextPage() {\r\n    this.data.getNextPosts(this.subreddit, this.currentListing.data.after).subscribe(\r\n      x => this.currentListing = x\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.data.getPosts(this.subreddit).subscribe(\r\n      x => this.currentListing = x\r\n    );\r\n  }\r\n\r\n}\r\n","<div>\r\n    <div style=\"width: 100%;\">r/ <input [(ngModel)]=\"subreddit\" (input)=\"subredditChange()\" />\r\n        <button (click)=\"nextPage()\">Next</button>\r\n    </div>\r\n    <ng-container *ngIf=\"currentListing\">\r\n        <app-reddit-card *ngFor=\"let card of currentListing.data.children\" [card]=\"card.data\"></app-reddit-card>\r\n    </ng-container>\r\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomePageComponent } from './components/home-page/home-page.component';\n\nconst routes: Routes = [\n  {path: '', pathMatch: 'full', component: HomePageComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}